{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\khadeer\\\\Desktop\\\\PROJECTS\\\\BLOGGING\\\\frontend\\\\src\\\\context\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [token, setToken] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  useEffect(() => {\n    // Check for stored token and user data on mount\n    const storedToken = localStorage.getItem('token');\n    const storedUser = localStorage.getItem('user');\n    if (storedToken && storedUser) {\n      try {\n        const parsedUser = JSON.parse(storedUser);\n        setToken(storedToken);\n        // Ensure profile_picture and bio are explicitly set, even if null from stored data\n        setUser({\n          id: parsedUser.id,\n          username: parsedUser.username,\n          email: parsedUser.email,\n          profile_picture: parsedUser.profile_picture || null,\n          bio: parsedUser.bio || null\n        });\n        setIsAuthenticated(true);\n      } catch (e) {\n        console.error(\"Failed to parse user from localStorage\", e);\n        logout(); // Clear invalid data\n      }\n    }\n  }, []);\n  const login = async (username, password) => {\n    try {\n      console.log('Attempting login for:', username);\n      const response = await fetch('http://localhost:5000/api/login', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          password\n        })\n      });\n      const data = await response.json();\n      console.log('Login response:', data);\n      if (!response.ok) {\n        throw new Error(data.message || 'Login failed');\n      }\n      if (!data.access_token || !data.user) {\n        throw new Error('Invalid response from server');\n      }\n      const userData = {\n        id: data.user.id,\n        username: data.user.username,\n        email: data.user.email,\n        profile_picture: data.user.profile_picture || null,\n        bio: data.user.bio || null\n      };\n      localStorage.setItem('token', data.access_token);\n      localStorage.setItem('user', JSON.stringify(userData));\n      setToken(data.access_token);\n      setUser(userData);\n      setIsAuthenticated(true);\n    } catch (error) {\n      console.error('Login error:', error);\n      throw new Error(error.message || 'Failed to login');\n    }\n  };\n  const register = async (username, email, password) => {\n    try {\n      console.log('Attempting registration for:', username);\n      const response = await fetch('http://localhost:5000/api/register', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          username,\n          email,\n          password\n        })\n      });\n      const data = await response.json();\n      console.log('Registration response:', data);\n      if (!response.ok) {\n        throw new Error(data.message || 'Registration failed');\n      }\n\n      // After successful registration, log the user in\n      await login(username, password);\n    } catch (error) {\n      console.error('Registration error:', error);\n      throw new Error(error.message || 'Failed to register');\n    }\n  };\n  const logout = () => {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    setToken(null);\n    setUser(null);\n    setIsAuthenticated(false);\n  };\n  const updateUser = userData => {\n    if (user) {\n      const updatedUser = {\n        ...user,\n        ...userData\n      };\n      setUser(updatedUser);\n      localStorage.setItem('user', JSON.stringify(updatedUser));\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user,\n      token,\n      login,\n      register,\n      logout,\n      isAuthenticated,\n      updateUser\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 138,\n    columnNumber: 5\n  }, this);\n};\n_s(AuthProvider, \"7DNqRrxPScLpg1PP5xEbEP37Eow=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","AuthProvider","children","_s","user","setUser","token","setToken","isAuthenticated","setIsAuthenticated","storedToken","localStorage","getItem","storedUser","parsedUser","JSON","parse","id","username","email","profile_picture","bio","e","console","error","logout","login","password","log","response","fetch","method","headers","body","stringify","data","json","ok","Error","message","access_token","userData","setItem","register","removeItem","updateUser","updatedUser","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","$RefreshReg$"],"sources":["C:/Users/khadeer/Desktop/PROJECTS/BLOGGING/frontend/src/context/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect } from 'react';\r\n\r\ninterface User {\r\n  id: number;\r\n  username: string;\r\n  email: string;\r\n  profile_picture?: string | null;\r\n  bio?: string | null;\r\n}\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  token: string | null;\r\n  login: (username: string, password: string) => Promise<void>;\r\n  register: (username: string, email: string, password: string) => Promise<void>;\r\n  logout: () => void;\r\n  isAuthenticated: boolean;\r\n  updateUser: (userData: Partial<User>) => void;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const AuthProvider: React.FC<{ children: React.ReactNode }> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [token, setToken] = useState<string | null>(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n\r\n  useEffect(() => {\r\n    // Check for stored token and user data on mount\r\n    const storedToken = localStorage.getItem('token');\r\n    const storedUser = localStorage.getItem('user');\r\n    \r\n    if (storedToken && storedUser) {\r\n      try {\r\n        const parsedUser = JSON.parse(storedUser);\r\n        setToken(storedToken);\r\n        // Ensure profile_picture and bio are explicitly set, even if null from stored data\r\n        setUser({\r\n          id: parsedUser.id,\r\n          username: parsedUser.username,\r\n          email: parsedUser.email,\r\n          profile_picture: parsedUser.profile_picture || null,\r\n          bio: parsedUser.bio || null,\r\n        });\r\n        setIsAuthenticated(true);\r\n      } catch (e) {\r\n        console.error(\"Failed to parse user from localStorage\", e);\r\n        logout(); // Clear invalid data\r\n      }\r\n    }\r\n  }, []);\r\n\r\n  const login = async (username: string, password: string) => {\r\n    try {\r\n      console.log('Attempting login for:', username);\r\n      const response = await fetch('http://localhost:5000/api/login', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log('Login response:', data);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Login failed');\r\n      }\r\n\r\n      if (!data.access_token || !data.user) {\r\n        throw new Error('Invalid response from server');\r\n      }\r\n\r\n      const userData = {\r\n        id: data.user.id,\r\n        username: data.user.username,\r\n        email: data.user.email,\r\n        profile_picture: data.user.profile_picture || null,\r\n        bio: data.user.bio || null,\r\n      };\r\n\r\n      localStorage.setItem('token', data.access_token);\r\n      localStorage.setItem('user', JSON.stringify(userData));\r\n      \r\n      setToken(data.access_token);\r\n      setUser(userData);\r\n      setIsAuthenticated(true);\r\n    } catch (error: any) {\r\n      console.error('Login error:', error);\r\n      throw new Error(error.message || 'Failed to login');\r\n    }\r\n  };\r\n\r\n  const register = async (username: string, email: string, password: string) => {\r\n    try {\r\n      console.log('Attempting registration for:', username);\r\n      const response = await fetch('http://localhost:5000/api/register', {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify({ username, email, password }),\r\n      });\r\n\r\n      const data = await response.json();\r\n      console.log('Registration response:', data);\r\n\r\n      if (!response.ok) {\r\n        throw new Error(data.message || 'Registration failed');\r\n      }\r\n\r\n      // After successful registration, log the user in\r\n      await login(username, password);\r\n    } catch (error: any) {\r\n      console.error('Registration error:', error);\r\n      throw new Error(error.message || 'Failed to register');\r\n    }\r\n  };\r\n\r\n  const logout = () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    setToken(null);\r\n    setUser(null);\r\n    setIsAuthenticated(false);\r\n  };\r\n\r\n  const updateUser = (userData: Partial<User>) => {\r\n    if (user) {\r\n      const updatedUser = { ...user, ...userData };\r\n      setUser(updatedUser);\r\n      localStorage.setItem('user', JSON.stringify(updatedUser));\r\n    }\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{ user, token, login, register, logout, isAuthenticated, updateUser }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}